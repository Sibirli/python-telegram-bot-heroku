import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import os
import sys
import re
from collections import OrderedDict
from functools import reduce
PORT = int(os.environ.get('PORT', 5000))

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)
TOKEN = '1205938982:AAHtuIxO4Y55fOFCy3GQnpuC8IAUi9R7n7s'

# Define a few command handlers. These usually take the two arguments update and
# context. Error handlers also receive the raised TelegramError object in error.
def start(update, context):
    """Bajƒ±na"""
    update.message.reply_text('Hi!')

def help(update, context):
    """Amcƒ±x"""
    update.message.reply_text('Help!')

    
    

cli_mode = len(sys.argv) > 1

if not cli_mode:
    import telebot
    bot = telebot.TeleBot('1205938982:AAHtuIxO4Y55fOFCy3GQnpuC8IAUi9R7n7s')

bitig_soft_digraph_dict = OrderedDict([
    ('r√∂',    'ê∞ºê∞á'),
    ('yal',    'ê∞ñê∞û'),
    ('tj',    '—Ç—å'),
    ('dj',    '–¥—å'),
    ('lj',    '–ª—å'),
    ('nj',    '–Ω—å'),
    ('rj',    '—Ä—å'),
    ('sj',    '—Å—å'),
    ('zj',    '–∑—å'),
    ('tsj',   '—Ü—å'),
    ('tcj',   '—á—å'),
])

bitig_apostrophe_digraph_dict = OrderedDict([
    ('r√∂',    'ê∞ºê∞á'),
    ('yal',    'ê∞ñê∞û'),
    ('qj',    '“ë ºj'),
    ('kj',    '–∫ ºj'),
    ('fj',    '—Ñ ºj'),
    ('vj',    '–≤ ºj'),
    ('wj',    '–≤–≤ ºj'),
    ('hj',    '–≥ ºj'),
    ('xj',    '—Ö ºj'),
    ('mj',    '–º ºj'),
    ('svja',  '—Å–≤—è'), # *—å non-normal // tbh no need, but current OG-fags
    ('tsvja', '—Ü–≤—è'),
    ('dzvja', '–¥–∑–≤—è'),
    ('tjmja', '—Ç—å–º—è'),
])

bitig_jotted_digraph_dict = OrderedDict([
    ('ja',    '—è'),
    ('je',    '—î'),
    ('ji',    '—ó'),
    ('jy',    '—ó'),
    ('ju',    '—é'),
])

bitig_letter_dict = OrderedDict([
    ('ctc',   '—â'),
    ('tc',    '—á'),
    ('ts',    '—Ü'),
    ('a',     '–∞'),
    ('b',     '–±'),
    ('c',     '—à'),
    ('d',     '–¥'),
    ('e',     '–µ'),
    ('f',     '—Ñ'),
    ('g',     '–∂'),
    ('h',     '–≥'),
    ('i',     '—ñ'),
    ('j',     '–π'),
    ('k',     '–∫'),
    ('l',     '–ª'),
    ('m',     '–º'),
    ('n',     '–Ω'),
    ('o',     '–æ'),
    ('√∂',     'ê∞á'),
    ('p',     '–ø'),
    ('q',     '“ë'),
    ('r',     '—Ä'),
    ('s',     '—Å'),
    ('t',     '—Ç'),
    ('u',     '—É'),
    ('v',     '–≤'),
    ('w',     '–≤–≤'),
    ('x',     '—Ö'),
    ('y',     'ê∞ñ'),
    ('z',     '–∑'),
    ('\'',    ' º'),
])

patterns_dicts = [(re.compile("(%s)" % '|'.join(dict.keys())), dict) for dict in (
    bitig_soft_digraph_dict,
    bitig_apostrophe_digraph_dict,
    bitig_jotted_digraph_dict,
    bitig_letter_dict,
)]



def is_bitik(str):
    return re.search(r"[a-z\']", str)



def xlate(s, pattern_dict):
    regex, dict = pattern_dict
    return regex.sub(lambda x: dict[x.group()], s)


def xlate_all(s):
    return reduce(xlate, patterns_dicts, s)


if cli_mode:
    bitik = str(sys.argv[1]).lower()
    if is_bitik(bitik):
        runes = xlate_all(bitik)
        print(runes)
else:
    @bot.message_handler(content_types=['text', 'photo'])
    @bot.edited_message_handler(content_types=['text', 'photo'])
    def reply(message):
        if message.content_type == 'text':
            bitik = message.text
        else:
            bitik = message.caption
        bitik = bitik.lower()
        if is_bitik(bitik):
            runes = xlate_all(bitik)
            bot.send_message(message.chat.id, runes)
    
    
    

def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main():
    """ƒ∞ am not your friend. my friend"""
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater(TOKEN, use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_webhook(listen="0.0.0.0",
                          port=int(PORT),
                          url_path=TOKEN)
    updater.bot.setWebhook('https://bitig-bot.herokuapp.com/' + TOKEN)

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()

if __name__ == '__main__':
    main()
